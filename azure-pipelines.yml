# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
      maven
    path: $(MAVEN_CACHE_FOLDER)
  displayName: Cache Maven local repo

- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
    goals: 'clean package'
    options: '-DskipTests=true'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.21'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
  displayName: Build with Maven

- task: CopyFiles@2
  inputs:
    Contents: '**/target/**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: Copy Files to Artifact Staging Directory

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: Publish Build Artifacts

- task: Bash@3
  inputs:
    filePath: ./scripts/deploy.sh
  env:
    EC2_HOST: $(EC2_HOST)
    EC2_USER: $(EC2_USER)
    EC2_KEY: $(EC2_KEY)
  displayName: Deploy on AWS EC2
